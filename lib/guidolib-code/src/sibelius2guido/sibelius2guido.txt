//-----------------------------------------------------------------
// the sibelius2guido plugin code in a more human readable form
//-----------------------------------------------------------------


//-----------------------------------------------------------------
Initialize "() { 
//------------------------------------------------------------
//  Sibelius to GUIDO Converter 0.41
//------------------------------------------------------------
//	created    2003 by Juergen Kilian <kilian@noteserver.org>
//	redesigned 2011 by Dominique Fober <fober@grame.fr>
//
//  This Source Code Form is subject to the terms of the Mozilla Public
//  License, v. 2.0. If a copy of the MPL was not distributed with this
//  file, You can obtain one at http://mozilla.org/MPL/2.0/.
//------------------------------------------------------------

AddToPluginsMenu("Export to Guido","Run"); 
}"

//-----------------------------------------------------------------
Run "() { 
	ret = Sibelius.ShowDialog(optionDialog, Self);
	if (not ret) { return true; }

	if (Sibelius.ScoreCount = 0)	// nothing to do		
	{		
		Sibelius.MessageBox("No score to export!");
		return True;				// that"s done :-)	
	}

	score = Sibelius.ActiveScore;
	max = score.StaffCount * score[0].BarCount;
	Sibelius.CreateProgressDialog("Exporting to Guido...", 0, max);
	gmn=BrowseScore(score);
	Sibelius.DestroyProgressDialog();

	trace(gmn);
	file = Sibelius.SelectFileToSave ("Export to Guido Music Notation file:", "sibelius2guido.gmn", "", "gmn", "TEXT", "Guido Music Notation format"); 
	if (IsObject(file)) {
		Sibelius.CreateTextFile(file.NameWithExt);
		Sibelius.AppendTextFile(file.NameWithExt, gmn);
		trace("... exported to " & file.NameWithExt);
	}
	else {
		trace("... cancelled.");
	}
}"

//-----------------------------------------------------------------
InitVoice "()
{
	gCurrentTimeSignature = "";
	gCurrentOctave = "1";
	gCurrentDuration = "1/4";
	gCurrentTied = False;
	gCurrentSlur = 0;
	gOpenedArticulations = 0;
	gLastStaff = "";
	gRestFormat = "";
	gBeamOpened = False;
	gTupletNum = 1;
	gTupletDenum = 1;
	gTupletDuration = -1;
}"

//-----------------------------------------------------------------
InitGMN "(score) 
{
	version=Sibelius.ProgramVersion;
	major= version/1000;
	version = version % 1000;
	minor=version/100;
	revision = version % 100;
	
	gmn = "(*\n"
		& "   GMN file exported from Sibelius " & major & "." & minor & "." & revision & "\n"
		& "   Source: " & score.FileName & "\n"
		& "   Sibelius to GUIDO Converter v.0.41\n"
		& "   Authors: Juergen Kilian <kilian@noteserver.org>\n"
		& "            Dominique Fober <fober@grame.fr>\n"
		& "   for more information, see at http://www.noteserver.org\n"
		& "                            and http://guidolib.sf.net\n"
		& "*)\n\n"; 
	return gmn;
}"

//-----------------------------------------------------------------
StartScore "(score) { return InitGMN(score) & "{\n";}"
EndScore "(score) 	{ return "}\n";}"

//-----------------------------------------------------------------
StartVoice "(staff, n) { 
	meter = "";
	if (staff.IsSystemStaff) {
		meter = " systemstaff "; 
	}
	
	sep = "";
	if ((n > 1) or (gLastStaff != "")) { sep = ",\n"; }
	gmnstaff = "\\staff<" & n & "> ";
	gmn = sep & "[\n  " & gmnstaff;
	if (gmnstaff != gLastStaff) {
		gLastStaff = gmnstaff;
		gmn = gmn
			& GetClef(staff.InitialClefStyleId) & " " 
			& GetKeySign(staff.InitialKeySignature) & " "
			& meter;
	}
	return gmn;
}"

EndVoice "(staff) 	{ 
	gmn = "]\n";
	if (gCurrentSlur != 0) 	{ gmn = EndSlur() & gmn; }
	if (gBeamOpened) 		{ gmn = EndBeam() & gmn; }
	return gmn;
}"
StartBar "(bar, n) 	{ return " (* bar " & n & " *) ";}"
EndBar "(bar) 		{ return "\n  ";}"

//-----------------------------------------------------------------
VoiceStyle "(up) 	
{ 
	if (up) {
		gRestFormat = "\\restFormat< dy=-2hs> ";
		return "\\stemsUp " & gRestFormat;
	}
	else {
		gRestFormat = "\\restFormat< dy=3hs> ";
		return "\\stemsDown " & gRestFormat;
	}
}"

//-----------------------------------------------------------------
StartTuplet "(tuplet) { 
	gTupletNum = tuplet.Left;
	gTupletDenum = tuplet.Right;
	gTupletDuration = tuplet.PlayedDuration;
}"

//-----------------------------------------------------------------
EndTuplet "( ) { 
	gTupletNum = 1;
	gTupletDenum = 1;
	gTupletDuration = -1;
}"

//-----------------------------------------------------------------
CheckTuplet "(duration) {
	if (gTupletDuration > 0) {
		realduration = (duration * gTupletDenum) / gTupletNum;
		gTupletDuration = gTupletDuration - realduration;
		if (gTupletDuration < 0.1) { EndTuplet(); }
	}
}"

//-----------------------------------------------------------------
Duration2Rational "(duration) { 
	num 	= duration * gTupletDenum;
	denum 	= 1024 * gTupletNum;
	while (((num%2) = 0) and (denum > 1)) {
		num = num /2;
		denum = denum /2;
	}
	return num & "/" & denum; }
}"

//-----------------------------------------------------------------
GetClef "(clef) { 
	gmn="unknown";
	switch (clef) {
		case ("clef.alto") 			{ gmn = "alto";}
		case ("clef.baritone.c") 	{ gmn = "c5";}
		case ("clef.baritone.f") 	{ gmn = "f3";}
		case ("clef.bass") 			{ gmn = "f";}
		case ("clef.bass.down.8") 	{ gmn = "f-8";}
		case ("clef.bass.up.15") 	{ gmn = "f+15";}
		case ("clef.bass.up.8") 	{ gmn = "f+8";}
		case ("clef.null") 			{ gmn = "none";}
		case ("clef.percussion") 	{ gmn = "perc";}
		case ("clef.percussion_2") 	{ gmn = "perc";}
		case ("clef.soprano") 		{ gmn = "c1";}
		case ("clef.soprano.mezzo") { gmn = "c2";}
		case ("clef.tab") 			{ gmn = "none";}
		case ("clef.tab.small") 	{ gmn = "none";}
		case ("clef.tab.small.taller") { gmn = "none";}
		case ("clef.tab.taller") 	{ gmn = "none";}
		case ("clef.tenor") 		{ gmn = "c4";}
		case ("clef.tenor.down.8") 	{ gmn = "c4-8";}
		case ("clef.treble") 		{ gmn = "g";}
		case ("clef.treble.down.8") { gmn = "g-8";}
		case ("clef.treble.down.8.bracketed") { gmn = "g-8";}
		case ("clef.treble.down.8.old") { gmn = "gg";}
		case ("clef.treble.up.15") 	{ gmn = "g+15";}
		case ("clef.treble.up.8") 	{ gmn = "g+8";}
		case ("clef.violin.french") { gmn = "g1";}
	}
	return "\\clef<" & Chr(34) & gmn & Chr(34) & "> ";
}"

//-----------------------------------------------------------------
GetKeySign "(key) { return "\\key<" & key.Sharps & "> ";}"

//-----------------------------------------------------------------
GetBarRest "() { 
	fbegin="";
	fafter="";
	if (gRestFormat != "") {
		fbegin = "\\restFormat< dy=0hs> ";
		fafter = gRestFormat;
	}
	gCurrentDuration = gCurrentTimeSignature;
	return fbegin & "_*" & gCurrentTimeSignature & " " & fafter;
}"

//-----------------------------------------------------------------
GetBarEmpty "() { 
	gCurrentDuration = gCurrentTimeSignature;
	return "empty*" & gCurrentTimeSignature & " ";
}"

//-----------------------------------------------------------------
GetGMNRest "(duration) { 
	gmn = "_";
	if (duration != gCurrentDuration) { 
		gmn = gmn & "*" & duration;
		gCurrentDuration = duration;
	}
	return gmn & " ";
}"

//-----------------------------------------------------------------
GetAlter "(note) {
	switch (note.Substring(note.Name,1,1)) {
		case (DoubleSharp)	{ return -0.5; }
		case (DoubleFlat)	{ return +0.5; }
	}
	switch (note.Substring(note.Name,2,1)) {
		case (DoubleSharp)	{ return -0.5; }
		case (DoubleFlat)	{ return +0.5; }
	}
	return 0;
}"

//-----------------------------------------------------------------
GetGMNNote "(note) {
	gmn = "x";
	switch (note.Substring(note.Name,0,1)) {
		case ("C")	{ gmn = "c"; }
		case ("D")	{ gmn = "d"; }
		case ("E")	{ gmn = "e"; }
		case ("F")	{ gmn = "f"; }
		case ("G")	{ gmn = "g"; }
		case ("A")	{ gmn = "a"; }
		case ("B")	{ gmn = "b"; }
	}
	alter = "";
	switch (note.Accidental) {
		case (Sharp)		{ alter = "#"; }
		case (Flat)			{ alter = "&"; }
		case (DoubleSharp)	{ alter = "##"; }
		case (DoubleFlat)	{ alter = "&&"; }
	}
	return gmn & alter;
}"

//-----------------------------------------------------------------
GetNote "(note, duration) {
	oct = note.DiatonicPitch/7 - 4;
	gmn = GetGMNNote(note);

	tied = note.Tied;
	if (tied and (gCurrentTied = False)) {
		gmn = "\\tieBegin " & gmn;
		gCurrentTied = True;
	}

	if (oct != gCurrentOctave) { 
		gmn = gmn & oct;
		gCurrentOctave = oct;
	}
	
	if (duration != gCurrentDuration) { 
		gmn = gmn & "*" & duration;
		gCurrentDuration = duration;
	}

	alter = GetAlter(note);
	if (alter != 0) {
		gmn = "\\alter<" & alter & ">(" & gmn & ")";
	}

	if ((tied = False) and gCurrentTied) {
		gmn = gmn & " \\tieEnd ";
		gCurrentTied = False;
	}
	return gmn;
}"

//-----------------------------------------------------------------
ArtPlus() 	{ gOpenedArticulations = gOpenedArticulations + 1; }
ArtMinus() 	{ gOpenedArticulations = gOpenedArticulations - 1; }

//-----------------------------------------------------------------
GetArticulation "(nrest) { 
	gmn = "";
//	if (nrest.GetArticulation(TriPauseArtic)) 		{}
//	if (nrest.GetArticulation(PauseArtic)) 			{}
//	if (nrest.GetArticulation(SquarePauseArtic))	{}
//	if (nrest.GetArticulation(Custom2Artic)) 		{}
//	if (nrest.GetArticulation(DownBowArtic)) 		{}
//	if (nrest.GetArticulation(UpBowArtic)) 			{}
	if (nrest.GetArticulation(PlusArtic)) 			{ ArtPlus(); gmn = "\\\pizz(";}
	if (nrest.GetArticulation(HarmonicArtic)) 		{ ArtPlus(); gmn = "\\\harmonic("; }
//	if (nrest.GetArticulation(MarcatoArtic)) 		{}
	if (nrest.GetArticulation(AccentArtic)) 		{ ArtPlus(); gmn = "\\accent("; }
	if (nrest.GetArticulation(TenutoArtic)) 		{ ArtPlus(); gmn = "\\ten("; }
//	if (nrest.GetArticulation(WedgeArtic)) 			{}
//	if (nrest.GetArticulation(StaccatissimoArtic)) 	{}
	if (nrest.GetArticulation(StaccatoArtic)) 		{ ArtPlus(); gmn = "\\\stacc(";}
	return gmn;
}"

//-----------------------------------------------------------------
GetChord "(nrest, duration) { 
	gmn = "{";
	sep = " ";
	for each note in nrest
	{
		gmn = gmn & sep & GetNote (note, duration);
		sep = ", ";
	}
	return gmn & "} ";
}"

//-----------------------------------------------------------------
TraceBeam "(beam) { 
	switch (beam) {
		case (StartBeam) 	{ trace ("start beam"); }
		case (ContinueBeam) { trace ("continue beam"); }
		case (SingleBeam)   { trace ("single beam"); }
		case (NoBeam) 		{ trace ("no beam"); }
	}
}"

//-----------------------------------------------------------------
GetNoteRest "(nrest) { 
	gmn = GetArticulation (nrest);	
	durstr = Duration2Rational(nrest.Duration);
	
	count = nrest.NoteCount;
	switch (count) {
		case (0) { gmn = GetGMNRest(durstr); }
		case (1) { for each note in nrest { gmn = gmn & GetNote (note, durstr) & " "; }}
		default { gmn = gmn & GetChord (nrest, durstr); }
	}

	while (gOpenedArticulations > 0) {
		gmn = gmn & ")";
		ArtMinus();
	}

	if (gCurrentSlur > 0) {
		gCurrentSlur = gCurrentSlur - nrest.Duration;
		if (gCurrentSlur = 0) { gCurrentSlur = -1; }
	}
	else {
		if (gCurrentSlur < 0) { gmn = gmn & EndSlur(); }
	}

	if (gExportBeaming) {
		beam = nrest.Beam;
		switch (beam) {
			case (StartBeam) 	{ gmn = GetBeam() & gmn; }
			case (SingleBeam) 	{ gmn = GetBeam() & gmn; }
			case (NoBeam) {
				if (gBeamOpened) { gmn = gmn & EndBeam(); }
			}
		}
	}
	CheckTuplet (nrest.Duration);
	return gmn;
}"

//-----------------------------------------------------------------
GetText "(obj) { 
	gmn = Chr(34) & obj.Text  & Chr(34);
	if ((obj.Text = "f") or
		(obj.Text = "p") or
		(obj.Text = "mp") or
		(obj.Text = "mf") or
		(Substring (obj.Text,0,2) = "ff") or
		(Substring (obj.Text,0,2) = "pp"))
	{
		gmn = "\\i<" & gmn & "> ";
	}
	else {
		gmn = "\\text<" & gmn & "> ";
	}
	return gmn;
}"

//-----------------------------------------------------------------
GetSlur "(obj) { 
	gmn = "\\slur (";
	if (gCurrentSlur != 0) { gmn = ") " & gmn; }
	gCurrentSlur = obj.Duration;
	return gmn;
}"

//-----------------------------------------------------------------
EndSlur "() { 
	gCurrentSlur = 0;
	return ") ";
}"

//-----------------------------------------------------------------
GetBeam "() { 
	beam = "\\beam (";
	if (gBeamOpened) { return ") " & beam; }
	gBeamOpened=True; 
	return beam;
}"
EndBeam "() { 
	gBeamOpened=False; 
	return ") ";
}"

//-----------------------------------------------------------------
GetTimeSign "(timesign) { 
	gmn = "";
	switch (timesign.Text) {
		case (CommonTimeString) {
			gmn = "C";
		}
		case (AllaBreveTimeString) {
			gmn = "C/";
		}
		default {
			gmn = timesign.Numerator & "/" & timesign.Denominator;
		}
	}
	return "\\meter<" & Chr(34) & gmn & Chr(34) & "> ";
}"

//-----------------------------------------------------------------
GetBarObject"(bo) 
{
	switch (bo.Type) {
		case ("Clef") 			{ return GetClef(bo.StyleId); }
		case ("SpecialBarline") { return ""; }
		case ("TimeSignature") 	{ return ""; }
		case ("KeySignature")	{ return GetKeySign(bo); }
		case ("Line") 			{ return ""; }
//		case ("ArpeggioLine") 	{ return ""; }
		case ("CrescendoLine") 	{ return ""; }
		case ("DiminuendoLine") { return ""; }
		case ("GlissandoLine") 	{ return ""; }
		case ("OctavaLine") 	{ return ""; }
		case ("PedalLine") 		{ return ""; }
		case ("RepeatTimeLine") { return ""; }
		case ("Slur") 			{ return GetSlur(bo); }
		case ("Trill") 			{ return ""; }
		case ("Box") 			{ return ""; }
		case ("Tuplet") 		{ return StartTuplet(bo); }
		case ("RitardLine")		{ return ""; }
		case ("LyricItem") 		{ return ""; }
		case ("Text") 			{ return GetText(bo); }
//		case ("GuitarFrame") 	{ return ""; }
//		case ("GuitarScaleDiagram") { return ""; }
		case ("Transposition") 	{ return ""; }
		case ("RehearsalMark") 	{ return ""; }
		case ("InstrumentChange") { return ""; }
		case ("BarRest") 		{ return GetBarRest(); }
		case ("NoteRest") 		{ return GetNoteRest(bo); }
		case ("Graphic") 		{ return ""; }
		case ("Barline") 		{ return ""; }
		case ("Comment") 		{ return ""; }
	}
	return "";
}"

//-----------------------------------------------------------------
BrowseScore "(score) 
{
	gmn = StartScore (score);
	n = 1;
	for each s in score 
	{
		gmn = gmn & BrowseStaff (s, n);
		n = n + 1;
	}
	return gmn & EndScore(score);
}"


//-----------------------------------------------------------------
GetVoices "(staff) 
{
	array = utils.CreateArrayBlanket(0,6); 	// default to no voice
	for each bar in staff 
	{
		for each bo in bar  {
			array[bo.VoiceNumber] = array[bo.VoiceNumber] + 1;
		}
	}
	return array;
}

//-----------------------------------------------------------------
VoicesCount "(varray) 
{
	count = 0;
	for v=1 to 5 {
		if (varray[v] > 0) { 	count = count + 1; }
	}
	return count;
}

//-----------------------------------------------------------------
BrowseVoice "(staff, voice) 
{
	gmn = "";
	count = 1;
	for each bar in staff 
	{
		bo.VoiceNumber = voice;
		if (bar.BarObjectCount > 0) {
			voicestr = BrowseBar (bar, count, voice);
			count = count + 1;
			if (voicestr != "")  { gmn = gmn & voicestr; }
		}
	}
	return gmn;
}"

//-----------------------------------------------------------------
BrowseStaff "(staff, n) 
{
	if (staff.IsSystemStaff) { return ""; }
	array = GetVoices(staff);
	nv = VoicesCount (array);

	InitVoice();
	gmn = StartVoice (staff, n);
	if (nv > 1) 	{ gmn = gmn & VoiceStyle(True) & "\n  "; }
	else			{ gmn = gmn & "\\stemsAuto \n  "; }

	bcount = ((n-1)*staff.BarCount) + 1;
	count = 1;
	for each bar in staff 
	{
		if (Sibelius.UpdateProgressDialog(bcount, "Staff " & n) = 0) { return ""; }	
		if (bar.BarObjectCount > 0) {
			gmn = gmn & BrowseSystemBar(bar.BarNumber) & BrowseBar (bar, count, 1);
			bcount = bcount + 1;
			count = count + 1;
		}
	}
	gmn = gmn & EndVoice (staff);

	for v=2 to 5 {
		if (array[v] > 0) {
			if (Sibelius.UpdateProgressDialog(bcount, "Staff " & n & " voice " & v) = 0) { return ""; }	
			InitVoice();
			gmn = gmn & StartVoice (staff, n) &  VoiceStyle(False) & "\n  " & BrowseVoice (staff, v) & EndVoice (staff);
		}
	}
	return gmn;
}"

//-----------------------------------------------------------------
BrowseSystemBar "(barnum) 
{
	timesign = Sibelius.ActiveScore.SystemStaff.CurrentTimeSignature(barnum);
	ts = timesign.Numerator & "/" & timesign.Denominator;
	if (ts = gCurrentTimeSignature) {
		return "";
	}
	else {	
		barline = ""; 
		if (gCurrentTimeSignature != "") { barline = "| "; }
		gCurrentTimeSignature = ts;
		return barline & GetTimeSign(timesign);
	}
}"

//-----------------------------------------------------------------
BrowseBar "(bar, n, voice) 
{
	gmn = "";
	for each bo in bar 
	{
		if (bo.VoiceNumber = voice) {
			gmn = gmn & GetBarObject (bo);
		}
	}
	if (gmn = "") { gmn = GetBarEmpty(); }
	return StartBar (bar, n) & gmn & EndBar (bar);
}"


//-----------------------------------------------------------------
// optionDialog
//-----------------------------------------------------------------
optionDialog "Dialog"
{
	Title "Sibelius to Guido exporter"
	X "134"
	Y "127"
	Width "180"
	Height "80"
	Controls
	{
		Button
		{
			Title "Cancel"
			X "20"
			Y "40"
			Width "60"
			Height "16"
			Value
			Method
			EndDialog "False"
		}
		Button
		{
			Title "OK"
			X "100"
			Y "40"
			Width "60"
			Height "16"
			Value
			Method
			EndDialog "True"
		}
		CheckBox
		{
			Title "Export beaming."
			X "20"
			Y "10"
			Width "66"
			Height "13"
			Value "gExportBeaming"
			Method
		}
	}
}