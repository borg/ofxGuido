Overview
========

PyGuido provides Python binding for the GUIDO Engine Library (GUIDOLib),
available at http://guidolib.sourceforge.net. It has been created by Benjamin
Rupprechter in 2012.

Currently, the tested platforms are:

- Mac OS X (10.6, 10.7) 64-bit

- Windows 7 64-bit

- Ubuntu 12.10 64-bit

Note that not all functionality has been tested yet, so some things might or
might not work. Comments and contributions are welcome.



Installation Notes
==================

In principle, compiled binary bindings are available in the "lib" folder.
However, since PyGuido utilizes the Shiboken bindings generator, which is part
of the PySide project, these binaries depend on the PySide and shiboken
libraries to be present on the system.

In addition, binary and development files of PySide and shiboken may not be
available in an already packaged format for your system, forcing you to
compile the needed dependencies yourself.

For all platforms, the needed dependencies are:
- working development environment (e.g. Visual Studio or XCode)
- CMake (http://www.cmake.org)
- Python (tested with version 2.7, 64-bit)
- Qt SDK (https://qt-project.org)
- PySide (http://qt-project.org/wiki/PySide)
- Shiboken (is part of PySide)

Note that all testing was done with Qt version 4.7.4, and on 64-bit computers.
Also note that you need to compile GUIDOlib and GuidoQt first, because PyGuido
depends on them.

We now provide some more information and pointers for every supported platform.


Windows
-------

Notes on compiling Qt:
- http://doc.qt.digia.com/qt/install-win.html
- http://www.holoborodko.com/pavel/2011/02/01/how-to-compile-qt-4-7-with-visual-studio-2010/

Notes on compiling PySide:
- http://qt-project.org/wiki/Building_PySide_on_Windows

Other notes:
- I was not able to have CMake figure out the correct shiboken and PySide paths
  by itself, so they are hardcoded in the CMake file. If you experience problems
  when generating the PyGuido bindings, make sure that these paths are correct
  for your system (in python/cmake/CmakeLists.txt).

After all dependencies are available, generating PyGuido involves opening up
the Visual Studio Command Prompt, changing to the "python" subdirectory of
GUIDOlib, and executing the following commands:

cd cmake
mkdir build
cd build
cmake -G "Visual Studio 10 Win64" ..
msbuild PyGuido.sln /property:Configuration=Release

If everything went well, you should then have a (newly compiled) Pyton module
called "PyGuido.pyd" in the folder python/lib/win. To test if everything is
working, open up a Python console in this folder and type "import PyGuido".


Mac OSX
-------

Notes on compiling Qt:
- http://doc.qt.digia.com/qt/install-mac.html

Notes on compiling PySide:
- http://qt-project.org/wiki/Building_PySide_on_Mac_OS_X

Other notes:
- Make sure you have no spaces in any filenames, otherwise you may run into
  serious trouble.

After all dependencies are available, generating PyGuido involves opening up
the Terminal, changing to the "python" subdirectory of GUIDOlib, and executing
the following commands:

cd cmake
mkdir build
cd build
cmake -G "Xcode" ..
xcodebuild -project PyGuido.xcodeproj -configuration Release

If everything went well, you should then have a (newly compiled) Pyton module
called "PyGuido.so" in the folder python/lib/mac. To test if everything is
working, open up a Python console in this folder and type "import PyGuido".


Linux
-----

Notes on compiling Qt:
- http://doc.qt.digia.com/qt/install-x11.html

Notes on compiling PySide:
- http://qt-project.org/wiki/Building_PySide_on_Linux

Other notes:
- On Ubuntu, you can try installing the packages "qt-sdk", "libshiboken-dev",
  "shiboken", and "python-pyside" instead of compiling. You may have to add a
  PPA (see e.g. http://qt-project.org/wiki/PySide_Binaries_Linux).

After all dependencies are available, generating PyGuido involves opening up
a terminal, changing to the "python" subdirectory of GUIDOlib, and executing
the following commands:

cd cmake
mkdir build
cd build
cmake ..
make

If everything went well, you should then have a (newly compiled) Pyton module
called "PyGuido.so" in the folder python/lib/linux. To test if everything is
working, open up a Python console in this folder and type "import PyGuido".


Problems and Solutions
----------------------

If you get an error message similar to "error: no 'const QMetaObject*
QGuidoWidgetWrapper::metaObject() const' member function declared in class
'QGuidoWidgetWrapper'":
- Try to run cmake with the argument "-DFIX_METAOBJECT_HEADER_ERROR=1". This
  patches some header files that seem to be incorrectly generated by shiboken.
  Note that sed (http://en.wikipedia.org/wiki/Sed) needs to be installed for
  this to work.



License
=======

PyGuido is released under the LGPL 2.1 or later, i.e. under the same license as
the GUIDO Engine Library.
